# from fduthesis: https://github.com/stone-zeng/fduthesis/blob/master/.github/workflows/test.yml

name: build

on:
  - push
  - pull_request

env:
  CTAN_URL: http://mirrors.ctan.org
  DOWNLOAD_DIR: texlive_download
  EXTRACT_DIR: texlive_extract
  BUILD_DIR: build
  NOTO_URL: https://noto-website-2.storage.googleapis.com/pkgs
  SED_REP: s/\\documentclass/\\documentclass\[fontset=none\]/
  SED_REP_WITH_CLS_ARGS: s/\\documentclass\[\(.*\)\]/\\documentclass\[\1, fontset=none\]/
  UBUNTU_FONTS_DIR: $HOME/.local/share/fonts/

jobs:
  build-ubuntu:
    name: Build on Ubuntu
    runs-on: ubuntu-latest
    if: ${{ contains(github.event.head_commit.message, '[ci ubuntu]') || !contains(github.event.head_commit.message, '[ci skip]') }}
    steps:
      - uses: actions/checkout@v2
      - name: Install Noto and Times fonts
        run: |
          sudo apt-get update
          echo ttf-mscorefonts-installer msttcorefonts/accepted-mscorefonts-eula select true | sudo debconf-set-selections
          sudo apt-get --yes install fonts-noto-cjk fonts-noto-cjk-extra ttf-mscorefonts-installer
      - name: Get TeX Live hash
        id: texlive-hash
        run: |
          HASH=$(curl -sSL ${{ env.CTAN_URL }}/systems/texlive/Images/texlive2020.iso.sha512 | head -c 10)
          echo "::set-output name=hash::$HASH"
      - name: Check TeX Live cache
        id: texlive-cache
        uses: actions/cache@v2
        with:
          path: ${{ env.DOWNLOAD_DIR }}
          key: ${{ steps.texlive-hash.outputs.hash }}
      - name: Download TeX Live image
        if: steps.texlive-cache.outputs.cache-hit != 'true'
        run: |
          mkdir ${{ env.DOWNLOAD_DIR }}
          pushd ${{ env.DOWNLOAD_DIR }}
          curl -O -L ${{ env.CTAN_URL }}/systems/texlive/Images/texlive2020.iso
          popd
      - name: Install TeX Live
        run: |
          7z x ${{ env.DOWNLOAD_DIR }}/texlive2020.iso -o${{ env.EXTRACT_DIR }}
          chmod +x ${{ env.EXTRACT_DIR }}/install-tl
          ./${{ env.EXTRACT_DIR }}/install-tl --profile .github/workflows/texlive.profile
          echo "/tmp/texlive/bin/x86_64-linux" >> $GITHUB_PATH
      - name: Build user document (LuaLaTeX)
        run: |
          sed -i '${{ env.SED_REP_WITH_CLS_ARGS }}' shtthesis-user-guide.tex
          latexmk -pdflua -outdir=${{ env.BUILD_DIR }}/lualatex
      - name: Build user document (XeLaTeX)
        if: success() || failure()
        run: |
          latexmk -pdfxe -outdir=${{ env.BUILD_DIR }}/xelatex
      - name: Archive build outputs
        if: success() || failure()
        uses: actions/upload-artifact@v2
        with:
          name: ubuntu-build
          path: ${{ env.BUILD_DIR }}
  build-macos:
    name: Build on macOS
    runs-on: macos-latest
    if: ${{ contains(github.event.head_commit.message, '[ci macos]') || !contains(github.event.head_commit.message, '[ci skip]') }}
    steps:
      - uses: actions/checkout@v2
      - name: Install utilities
        run: |
          brew install gnu-sed
      - name: Install Noto fonts
        run: |
          for i in NotoSerifCJK NotoSansCJK; do curl -O ${{ env.NOTO_URL }}/$i.ttc.zip; done
          unzip -o "*.zip"
          cp -vf *.ttc /Library/Fonts/
      - name: Get TeX Live hash
        id: texlive-hash
        run: |
          HASH=$(curl -sSL ${{ env.CTAN_URL }}/systems/texlive/Images/texlive2020.iso.sha512 | head -c 10)
          echo "::set-output name=hash::$HASH"
      - name: Check TeX Live cache
        id: texlive-cache
        uses: actions/cache@v2
        with:
          path: ${{ env.DOWNLOAD_DIR }}
          key: ${{ steps.texlive-hash.outputs.hash }}
      - name: Download TeX Live image
        if: steps.texlive-cache.outputs.cache-hit != 'true'
        run: |
          mkdir ${{ env.DOWNLOAD_DIR }}
          pushd ${{ env.DOWNLOAD_DIR }}
          curl -O -L ${{ env.CTAN_URL }}/systems/texlive/Images/texlive2020.iso
          popd
      - name: Install TeX Live
        run: |
          7z x ${{ env.DOWNLOAD_DIR }}/texlive2020.iso -o${{ env.EXTRACT_DIR }}
          chmod +x ${{ env.EXTRACT_DIR }}/install-tl
          ./${{ env.EXTRACT_DIR }}/install-tl --profile .github/workflows/texlive.profile
          echo "/tmp/texlive/bin/x86_64-darwin" >> $GITHUB_PATH
      - name: Build user document (LuaLaTeX)
        run: |
          gsed -i '${{ env.SED_REP_WITH_CLS_ARGS }}' shtthesis-user-guide.tex
          latexmk -pdflua -outdir=${{ env.BUILD_DIR }}/lualatex
      - name: Build user document (XeLaTeX)
        if: success() || failure()
        run: |
          latexmk -pdfxe -outdir=${{ env.BUILD_DIR }}/xelatex
      - name: Archive build outputs
        if: success() || failure()
        uses: actions/upload-artifact@v2
        with:
          name: macos-build
          path: ${{ env.BUILD_DIR }}
  # Line wrap problem is difficult to resolve on windows.
  build-windows:
    runs-on: windows-latest
    name: Build on Windows
    if: ${{ contains(github.event.head_commit.message, '[ci windows]') || !contains(github.event.head_commit.message, '[ci skip]') }}
    steps:
      - uses: actions/checkout@v2
      - name: Get TeX Live hash
        id: texlive-hash
        run: |
          Invoke-WebRequest -Uri ${{ env.CTAN_URL }}/systems/texlive/Images/texlive2020.iso.sha512 -OutFile texlive2020.iso.sha512
          $hash = (Get-Content .\texlive2020.iso.sha512 -Raw).Substring(0, 10)
          echo "::set-output name=hash::$hash"
      - name: Check TeX Live cache
        id: texlive-cache
        uses: actions/cache@v2
        with:
          path: ${{ env.DOWNLOAD_DIR }}
          key: ${{ steps.texlive-hash.outputs.hash }}
      - name: Download TeX Live image
        if: steps.texlive-cache.outputs.cache-hit != 'true'
        run: |
          New-Item ${{ env.DOWNLOAD_DIR }} -ItemType Directory
          Push-Location ${{ env.DOWNLOAD_DIR }}
          Invoke-WebRequest -Uri ${{ env.CTAN_URL }}/systems/texlive/Images/texlive2020.iso -OutFile texlive2020.iso
          Invoke-WebRequest -Uri ${{ env.CTAN_URL }}/systems/win32/w32tex/TLW64/tl-win64.zip -OutFile tl-win64.zip
          Pop-Location
      - name: Install TeX Live and utilities
        run: |
          7z x ${{ env.DOWNLOAD_DIR }}/texlive2020.iso -o${{ env.EXTRACT_DIR }}
          Push-Location ${{ env.EXTRACT_DIR }}
          .\install-tl-windows --no-gui --profile ..\.github\workflows\texlive-win.profile
          Pop-Location
          7z x ${{ env.DOWNLOAD_DIR }}/tl-win64.zip -o${{ github.workspace }}/tmp/texlive
          choco install sed
          echo "${{ github.workspace }}\tmp\texlive\bin\win64" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          echo "${{ github.workspace }}\tmp\texlive\bin\win32" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
      - name: Install Noto fonts
        run: |
          "NotoSerifCJK-Regular", "NotoSerifCJK-Bold", "NotoSansCJK-Regular", "NotoSansCJK-Bold", "NotoSansCJK-Medium" | ForEach-Object -Process {Invoke-WebRequest -Uri "${{ env.NOTO_URL }}/$_.ttc.zip" -OutFile "$_.ttc.zip"}
          Get-ChildItem *.ttc.zip | Expand-Archive -DestinationPath . -Force
          Copy-Item *.ttc C:\Windows\Fonts
          fc-cache -fsv
          luaotfload-tool -fuv
      - name: Build user document (LuaLaTeX)
        run: |
          sed -i '${{ env.SED_REP_WITH_CLS_ARGS }}' shtthesis-user-guide.tex
          latexmk -pdflua -outdir=${{ env.BUILD_DIR }}/lualatex
      - name: Build user document (XeLaTeX)
        if: success() || failure()
        run: |
          latexmk -pdfxe -outdir=${{ env.BUILD_DIR }}/xelatex
      - name: Archive build outputs
        if: success() || failure()
        uses: actions/upload-artifact@v2
        with:
          name: windows-build
          path: ${{ env.BUILD_DIR }}
