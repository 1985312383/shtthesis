# from fduthesis: https://github.com/stone-zeng/fduthesis/blob/master/.github/workflows/test.yml

name: Build

on:
  push:
  schedule:
  - cron:  '0 0 * * *'

env:
  CTAN_URL: http://mirrors.ctan.org
  DOWNLOAD_DIR: texlive_download
  EXTRACT_DIR: texlive_extract
  BUILD_DIR: build
  NOTO_URL: https://noto-website-2.storage.googleapis.com/pkgs

jobs:
  build-ubuntu:
    name: Build on Ubuntu
    runs-on: ubuntu-latest
    if: "!endsWith(github.event.head_commit.message, '[ci skip]')"
    steps:
    - uses: actions/checkout@v2
    - name: Install Source Han fonts
      run: |
        sudo apt-get update
        sudo apt-get install --yes fonts-noto-cjk
    - name: Get TeX Live hash
      id: texlive-hash
      run: |
        HASH=$(curl -sSL ${{ env.CTAN_URL }}/systems/texlive/Images/texlive2020.iso.sha512 | head -c 10)
        echo "::set-output name=hash::$HASH"
    - name: Check TeX Live cache
      id: texlive-cache
      uses: actions/cache@v2
      with:
        path: ${{ env.DOWNLOAD_DIR }}
        key: ${{ steps.texlive-hash.outputs.hash }}
    - name: Download TeX Live image
      if: steps.texlive-cache.outputs.cache-hit != 'true'
      run: |
        mkdir ${{ env.DOWNLOAD_DIR }}
        pushd ${{ env.DOWNLOAD_DIR }}
        curl -O -L ${{ env.CTAN_URL }}/systems/texlive/Images/texlive2020.iso
        popd
    - name: Install TeX Live
      run: |
        7z x ${{ env.DOWNLOAD_DIR }}/texlive2020.iso -o${{ env.EXTRACT_DIR }}
        chmod +x ${{ env.EXTRACT_DIR }}/install-tl
        ./${{ env.EXTRACT_DIR }}/install-tl --profile .github/workflows/texlive.profile
    - name: Build user document
      run: |
        export PATH=/tmp/texlive/bin/x86_64-linux:$PATH
        sed -i '1s/\\documentclass/\\documentclass\[fontset=none\]/' shtthesis-user-guide.tex
        latexmk -pdflua -outdir=${{ env.BUILD_DIR }}
    - name: Archive build outputs
      uses: actions/upload-artifact@v2
      with:
        name: ubuntu-build
        path: ${{ env.BUILD_DIR }}
  build-macos:
    name: Build on macOS
    runs-on: macos-latest
    if: "!endsWith(github.event.head_commit.message, '[ci skip]')"
    steps:
    - uses: actions/checkout@v2
    - name: Install utilities
      run: |
        brew install gnu-sed
    - name: Install Noto fonts
      run: |
        for i in NotoSerifCJK-Regular NotoSerifCJK-Bold NotoSansCJK-Regular NotoSansCJK-Bold; do curl -O ${{ env.NOTO_URL }}/$i.ttc.zip; done
        unzip -o "*.zip"
        cp -vf *.ttc /Library/Fonts/
    - name: Get TeX Live hash
      id: texlive-hash
      run: |
        HASH=$(curl -sSL ${{ env.CTAN_URL }}/systems/texlive/Images/texlive2020.iso.sha512 | head -c 10)
        echo "::set-output name=hash::$HASH"
    - name: Check TeX Live cache
      id: texlive-cache
      uses: actions/cache@v2
      with:
        path: ${{ env.DOWNLOAD_DIR }}
        key: ${{ steps.texlive-hash.outputs.hash }}
    - name: Download TeX Live image
      if: steps.texlive-cache.outputs.cache-hit != 'true'
      run: |
        mkdir ${{ env.DOWNLOAD_DIR }}
        pushd ${{ env.DOWNLOAD_DIR }}
        curl -O -L ${{ env.CTAN_URL }}/systems/texlive/Images/texlive2020.iso
        popd
    - name: Install TeX Live
      run: |
        7z x ${{ env.DOWNLOAD_DIR }}/texlive2020.iso -o${{ env.EXTRACT_DIR }}
        chmod +x ${{ env.EXTRACT_DIR }}/install-tl
        ./${{ env.EXTRACT_DIR }}/install-tl --profile .github/workflows/texlive.profile
    - name: Build user document
      run: |
        export PATH=/tmp/texlive/bin/x86_64-darwin:$PATH
        gsed -i '1s/\\documentclass/\\documentclass\[fontset=none\]/' shtthesis-user-guide.tex
        latexmk -pdflua -outdir=${{ env.BUILD_DIR }}
    - name: Archive build outputs
      uses: actions/upload-artifact@v2
      with:
        name: macos-build
        path: ${{ env.BUILD_DIR }}
  # Line wrap problem is difficult to resolve on windows.
  build-windows:
    runs-on: windows-latest
    if: "!endsWith(github.event.head_commit.message, '[ci skip]')"
    steps:
    - uses: actions/checkout@v2
    - name: Install utilities
      run: |
        choco install sed
    - name: Get TeX Live hash
      id: texlive-hash
      run: |
        Invoke-WebRequest -Uri ${{ env.CTAN_URL }}/systems/texlive/Images/texlive2020.iso.sha512 -OutFile texlive2020.iso.sha512
        $hash = (Get-Content .\texlive2020.iso.sha512 -Raw).Substring(0, 10)
        echo "::set-output name=hash::$hash"
    - name: Check TeX Live cache
      id: texlive-cache
      uses: actions/cache@v2
      with:
        path: ${{ env.DOWNLOAD_DIR }}
        key: ${{ steps.texlive-hash.outputs.hash }}
    - name: Download TeX Live image
      if: steps.texlive-cache.outputs.cache-hit != 'true'
      run: |
        New-Item ${{ env.DOWNLOAD_DIR }} -ItemType Directory
        Push-Location ${{ env.DOWNLOAD_DIR }}
        Invoke-WebRequest -Uri ${{ env.CTAN_URL }}/systems/texlive/Images/texlive2020.iso -OutFile texlive2020.iso
        Pop-Location
    - name: Install TeX Live
      run: |
        7z x ${{ env.DOWNLOAD_DIR }}/texlive2020.iso -o${{ env.EXTRACT_DIR }}
        Push-Location ${{ env.EXTRACT_DIR }}
        .\install-tl-windows --no-gui --profile ..\.github\workflows\texlive-win.profile
        Pop-Location
    - name: Install Noto fonts
      run: |
        ${env:PATH} = "${{ github.workspace }}\tmp\texlive\bin\win32;" + ${env:PATH}
        "NotoSerifCJK-Regular", "NotoSerifCJK-Bold", "NotoSansCJK-Regular", "NotoSansCJK-Bold" | ForEach-Object -Process {Invoke-WebRequest -Uri "${{ env.NOTO_URL }}/$_.ttc.zip" -OutFile "$_.ttc.zip"}
        Get-ChildItem *.ttc.zip | Expand-Archive -DestinationPath . -Force
        Copy-Item *.ttc C:\Windows\Fonts
        fc-cache -fv
    - name: Build user document
      run: |
        ${env:PATH} = "${{ github.workspace }}\tmp\texlive\bin\win32;" + ${env:PATH}
        sed -i '1s/\\documentclass/\\documentclass\[fontset=none\]/' shtthesis-user-guide.tex
        latexmk -pdflua -outdir=${{ env.BUILD_DIR }}
    - name: Archive build outputs
      uses: actions/upload-artifact@v2
      with:
        name: windows-build
        path: ${{ env.BUILD_DIR }}